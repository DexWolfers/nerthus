// Code generated by "enumer -type=TransactionStatus -json -transform=snake -trimprefix=TransactionStatus"; DO NOT EDIT.

package types

import (
	"encoding/json"
	"fmt"
)

const _TransactionStatusName = "underwaypassfailednotexpired"

var _TransactionStatusIndex = [...]uint8{0, 8, 12, 18, 21, 28}

func (i TransactionStatus) String() string {
	i -= 1
	if i >= TransactionStatus(len(_TransactionStatusIndex)-1) {
		return fmt.Sprintf("TransactionStatus(%d)", i+1)
	}
	return _TransactionStatusName[_TransactionStatusIndex[i]:_TransactionStatusIndex[i+1]]
}

var _TransactionStatusValues = []TransactionStatus{1, 2, 3, 4, 5}

var _TransactionStatusNameToValueMap = map[string]TransactionStatus{
	_TransactionStatusName[0:8]:   1,
	_TransactionStatusName[8:12]:  2,
	_TransactionStatusName[12:18]: 3,
	_TransactionStatusName[18:21]: 4,
	_TransactionStatusName[21:28]: 5,
}

// TransactionStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TransactionStatusString(s string) (TransactionStatus, error) {
	if val, ok := _TransactionStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TransactionStatus values", s)
}

// TransactionStatusValues returns all values of the enum
func TransactionStatusValues() []TransactionStatus {
	return _TransactionStatusValues
}

// IsATransactionStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TransactionStatus) IsATransactionStatus() bool {
	for _, v := range _TransactionStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TransactionStatus
func (i TransactionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TransactionStatus
func (i *TransactionStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TransactionStatus should be a string, got %s", data)
	}

	var err error
	*i, err = TransactionStatusString(s)
	return err
}
