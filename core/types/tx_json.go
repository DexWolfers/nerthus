// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"gitee.com/nerthus/nerthus/common"
	"gitee.com/nerthus/nerthus/common/hexutil"
)

var _ = (*txdataMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (t txdata) MarshalJSON() ([]byte, error) {
	type txdata struct {
		Time      hexutil.Uint64 `json:"time"     gencodec:"required"`
		Price     hexutil.Uint64 `json:"gasPrice" gencodec:"required"`
		GasLimit  hexutil.Uint64 `json:"gas"      gencodec:"required"`
		Sender    common.Address `json:"sender"   gencodec:"required"`
		Recipient common.Address `json:"to"       gencodec:"required"`
		Amount    *hexutil.Big   `json:"value"    gencodec:"required"`
		Payload   hexutil.Bytes  `json:"input"    gencodec:"required"`
		Seed      hexutil.Uint64 `json:"seed"`
		Timeout   hexutil.Uint64 `json:"timeout"`
		Sign      *SignContent   `json:"sign"    gencodec:"required"`
		Hash      *common.Hash   `json:"hash" rlp:"-"`
		From      common.Address `json:"from" rlp:"-"`
	}
	var enc txdata
	enc.Time = hexutil.Uint64(t.Time)
	enc.Price = hexutil.Uint64(t.Price)
	enc.GasLimit = hexutil.Uint64(t.GasLimit)
	enc.Sender = t.Sender
	enc.Recipient = t.Recipient
	enc.Amount = (*hexutil.Big)(t.Amount)
	enc.Payload = t.Payload
	enc.Seed = hexutil.Uint64(t.Seed)
	enc.Timeout = hexutil.Uint64(t.Timeout)
	enc.Sign = t.Sign
	enc.Hash = t.Hash
	enc.From = t.From
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *txdata) UnmarshalJSON(input []byte) error {
	type txdata struct {
		Time      *hexutil.Uint64 `json:"time"     gencodec:"required"`
		Price     *hexutil.Uint64 `json:"gasPrice" gencodec:"required"`
		GasLimit  *hexutil.Uint64 `json:"gas"      gencodec:"required"`
		Sender    *common.Address `json:"sender"   gencodec:"required"`
		Recipient *common.Address `json:"to"       gencodec:"required"`
		Amount    *hexutil.Big    `json:"value"    gencodec:"required"`
		Payload   *hexutil.Bytes  `json:"input"    gencodec:"required"`
		Seed      *hexutil.Uint64 `json:"seed"`
		Timeout   *hexutil.Uint64 `json:"timeout"`
		Sign      *SignContent    `json:"sign"    gencodec:"required"`
		Hash      *common.Hash    `json:"hash" rlp:"-"`
		From      *common.Address `json:"from" rlp:"-"`
	}
	var dec txdata
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Time == nil {
		return errors.New("missing required field 'time' for txdata")
	}
	t.Time = uint64(*dec.Time)
	if dec.Price == nil {
		return errors.New("missing required field 'gasPrice' for txdata")
	}
	t.Price = uint64(*dec.Price)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gas' for txdata")
	}
	t.GasLimit = uint64(*dec.GasLimit)
	if dec.Sender == nil {
		return errors.New("missing required field 'sender' for txdata")
	}
	t.Sender = *dec.Sender
	if dec.Recipient == nil {
		return errors.New("missing required field 'to' for txdata")
	}
	t.Recipient = *dec.Recipient
	if dec.Amount == nil {
		return errors.New("missing required field 'value' for txdata")
	}
	t.Amount = (*big.Int)(dec.Amount)
	if dec.Payload == nil {
		return errors.New("missing required field 'input' for txdata")
	}
	t.Payload = *dec.Payload
	if dec.Seed != nil {
		t.Seed = uint64(*dec.Seed)
	}
	if dec.Timeout != nil {
		t.Timeout = uint64(*dec.Timeout)
	}
	if dec.Sign == nil {
		return errors.New("missing required field 'sign' for txdata")
	}
	t.Sign = dec.Sign
	if dec.Hash != nil {
		t.Hash = dec.Hash
	}
	if dec.From != nil {
		t.From = *dec.From
	}
	return nil
}
