// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"gitee.com/nerthus/nerthus/common"
	"gitee.com/nerthus/nerthus/common/hexutil"
)

var _ = (*coinflowMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (c Coinflow) MarshalJSON() ([]byte, error) {
	type Coinflow struct {
		To     common.Address
		Amount *hexutil.Big
	}
	var enc Coinflow
	enc.To = c.To
	enc.Amount = (*hexutil.Big)(c.Amount)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (c *Coinflow) UnmarshalJSON(input []byte) error {
	type Coinflow struct {
		To     *common.Address
		Amount *hexutil.Big
	}
	var dec Coinflow
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.To != nil {
		c.To = *dec.To
	}
	if dec.Amount != nil {
		c.Amount = (*big.Int)(dec.Amount)
	}
	return nil
}
