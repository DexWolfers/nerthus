// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"gitee.com/nerthus/nerthus/common"
	"gitee.com/nerthus/nerthus/common/hexutil"
)

var _ = (*txresultMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (t TxResult) MarshalJSON() ([]byte, error) {
	type TxResult struct {
		Failed             bool           `json:"failed"            gencodec:"required"`
		GasUsed            hexutil.Uint64 `json:"gas_used"          gencodec:"required"`
		GasRemaining       hexutil.Uint64 `json:"gas_remaining" gencodec:"required"`
		CallContractOutput hexutil.Bytes  `json:"call_contract_output"`
		ReceiptRoot        common.Hash    `json:"receipt_root"     gencodec:"required"`
		NewContractAcct    common.Address `json:"new_contract_acct"`
		Coinflows          Coinflows      `json:"coinflows" `
		Hash               common.Hash    `json:"hash"`
	}
	var enc TxResult
	enc.Failed = t.Failed
	enc.GasUsed = hexutil.Uint64(t.GasUsed)
	enc.GasRemaining = hexutil.Uint64(t.GasRemaining)
	enc.CallContractOutput = t.CallContractOutput
	enc.ReceiptRoot = t.ReceiptRoot
	enc.NewContractAcct = t.NewContractAcct
	enc.Coinflows = t.Coinflows
	enc.Hash = t.Hash()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *TxResult) UnmarshalJSON(input []byte) error {
	type TxResult struct {
		Failed             *bool           `json:"failed"            gencodec:"required"`
		GasUsed            *hexutil.Uint64 `json:"gas_used"          gencodec:"required"`
		GasRemaining       *hexutil.Uint64 `json:"gas_remaining" gencodec:"required"`
		CallContractOutput *hexutil.Bytes  `json:"call_contract_output"`
		ReceiptRoot        *common.Hash    `json:"receipt_root"     gencodec:"required"`
		NewContractAcct    *common.Address `json:"new_contract_acct"`
		Coinflows          *Coinflows      `json:"coinflows" `
	}
	var dec TxResult
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Failed == nil {
		return errors.New("missing required field 'failed' for TxResult")
	}
	t.Failed = *dec.Failed
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gas_used' for TxResult")
	}
	t.GasUsed = uint64(*dec.GasUsed)
	if dec.GasRemaining == nil {
		return errors.New("missing required field 'gas_remaining' for TxResult")
	}
	t.GasRemaining = uint64(*dec.GasRemaining)
	if dec.CallContractOutput != nil {
		t.CallContractOutput = *dec.CallContractOutput
	}
	if dec.ReceiptRoot == nil {
		return errors.New("missing required field 'receipt_root' for TxResult")
	}
	t.ReceiptRoot = *dec.ReceiptRoot
	if dec.NewContractAcct != nil {
		t.NewContractAcct = *dec.NewContractAcct
	}
	if dec.Coinflows != nil {
		t.Coinflows = *dec.Coinflows
	}
	return nil
}
