// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"gitee.com/nerthus/nerthus/common"
)

// MarshalJSON marshals as JSON.
func (v VoteMsg) MarshalJSON() ([]byte, error) {
	type VoteMsg struct {
		Extra    []byte      `json:"extra"        gencodec:"required"`
		UnitHash common.Hash `json:"unit_hash"   gencodec:"required"`
		Sign     SignContent `json:"sign"        gencodec:"required"`
	}
	var enc VoteMsg
	enc.Extra = v.Extra
	enc.UnitHash = v.UnitHash
	enc.Sign = v.Sign
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (v *VoteMsg) UnmarshalJSON(input []byte) error {
	type VoteMsg struct {
		Extra    []byte       `json:"extra"        gencodec:"required"`
		UnitHash *common.Hash `json:"unit_hash"   gencodec:"required"`
		Sign     *SignContent `json:"sign"        gencodec:"required"`
	}
	var dec VoteMsg
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Extra == nil {
		return errors.New("missing required field 'extra' for VoteMsg")
	}
	v.Extra = dec.Extra
	if dec.UnitHash == nil {
		return errors.New("missing required field 'unit_hash' for VoteMsg")
	}
	v.UnitHash = *dec.UnitHash
	if dec.Sign == nil {
		return errors.New("missing required field 'sign' for VoteMsg")
	}
	v.Sign = *dec.Sign
	return nil
}
