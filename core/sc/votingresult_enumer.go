// Code generated by "enumer -type=VotingResult -json -transform=snake -trimprefix=VotingResult"; DO NOT EDIT.

package sc

import (
	"encoding/json"
	"fmt"
)

const _VotingResultName = "unknownagreedisagree"

var _VotingResultIndex = [...]uint8{0, 7, 12, 20}

func (i VotingResult) String() string {
	i -= 1
	if i >= VotingResult(len(_VotingResultIndex)-1) {
		return fmt.Sprintf("VotingResult(%d)", i+1)
	}
	return _VotingResultName[_VotingResultIndex[i]:_VotingResultIndex[i+1]]
}

var _VotingResultValues = []VotingResult{1, 2, 3}

var _VotingResultNameToValueMap = map[string]VotingResult{
	_VotingResultName[0:7]:   1,
	_VotingResultName[7:12]:  2,
	_VotingResultName[12:20]: 3,
}

// VotingResultString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VotingResultString(s string) (VotingResult, error) {
	if val, ok := _VotingResultNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to VotingResult values", s)
}

// VotingResultValues returns all values of the enum
func VotingResultValues() []VotingResult {
	return _VotingResultValues
}

// IsAVotingResult returns "true" if the value is listed in the enum definition. "false" otherwise
func (i VotingResult) IsAVotingResult() bool {
	for _, v := range _VotingResultValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for VotingResult
func (i VotingResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for VotingResult
func (i *VotingResult) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("VotingResult should be a string, got %s", data)
	}

	var err error
	*i, err = VotingResultString(s)
	return err
}
