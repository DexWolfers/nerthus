// Code generated by "enumer -type=ChainStatus -json -transform=snake -trimprefix=ChainStatus"; DO NOT EDIT.

package sc

import (
	"encoding/json"
	"fmt"
)

const _ChainStatusName = "normalwitness_replace_underwaynot_witnessinsufficient"

var _ChainStatusIndex = [...]uint8{0, 6, 30, 41, 53}

func (i ChainStatus) String() string {
	i -= 1
	if i >= ChainStatus(len(_ChainStatusIndex)-1) {
		return fmt.Sprintf("ChainStatus(%d)", i+1)
	}
	return _ChainStatusName[_ChainStatusIndex[i]:_ChainStatusIndex[i+1]]
}

var _ChainStatusValues = []ChainStatus{1, 2, 3, 4}

var _ChainStatusNameToValueMap = map[string]ChainStatus{
	_ChainStatusName[0:6]:   1,
	_ChainStatusName[6:30]:  2,
	_ChainStatusName[30:41]: 3,
	_ChainStatusName[41:53]: 4,
}

// ChainStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ChainStatusString(s string) (ChainStatus, error) {
	if val, ok := _ChainStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ChainStatus values", s)
}

// ChainStatusValues returns all values of the enum
func ChainStatusValues() []ChainStatus {
	return _ChainStatusValues
}

// IsAChainStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ChainStatus) IsAChainStatus() bool {
	for _, v := range _ChainStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ChainStatus
func (i ChainStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ChainStatus
func (i *ChainStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ChainStatus should be a string, got %s", data)
	}

	var err error
	*i, err = ChainStatusString(s)
	return err
}
