// Code generated by "enumer -type=ProposalStatus -json -transform=snake -trimprefix=ProposalStatus"; DO NOT EDIT.

package sc

import (
	"encoding/json"
	"fmt"
)

const _ProposalStatusName = "in_approvalin_votingpassedfailedexpiredpending_judgeapply"

var _ProposalStatusIndex = [...]uint8{0, 11, 20, 26, 32, 39, 52, 57}

func (i ProposalStatus) String() string {
	i -= 1
	if i >= ProposalStatus(len(_ProposalStatusIndex)-1) {
		return fmt.Sprintf("ProposalStatus(%d)", i+1)
	}
	return _ProposalStatusName[_ProposalStatusIndex[i]:_ProposalStatusIndex[i+1]]
}

var _ProposalStatusValues = []ProposalStatus{1, 2, 3, 4, 5, 6, 7}

var _ProposalStatusNameToValueMap = map[string]ProposalStatus{
	_ProposalStatusName[0:11]:  1,
	_ProposalStatusName[11:20]: 2,
	_ProposalStatusName[20:26]: 3,
	_ProposalStatusName[26:32]: 4,
	_ProposalStatusName[32:39]: 5,
	_ProposalStatusName[39:52]: 6,
	_ProposalStatusName[52:57]: 7,
}

// ProposalStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ProposalStatusString(s string) (ProposalStatus, error) {
	if val, ok := _ProposalStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ProposalStatus values", s)
}

// ProposalStatusValues returns all values of the enum
func ProposalStatusValues() []ProposalStatus {
	return _ProposalStatusValues
}

// IsAProposalStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ProposalStatus) IsAProposalStatus() bool {
	for _, v := range _ProposalStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ProposalStatus
func (i ProposalStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ProposalStatus
func (i *ProposalStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ProposalStatus should be a string, got %s", data)
	}

	var err error
	*i, err = ProposalStatusString(s)
	return err
}
