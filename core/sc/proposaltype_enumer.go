// Code generated by "enumer -type=ProposalType -json -transform=snake -trimprefix=ProposalType"; DO NOT EDIT.

package sc

import (
	"encoding/json"
	"fmt"
)

const _ProposalTypeName = "council_addcouncil_fireconfig_changesys_witness_campaignuser_witness_campaign"

var _ProposalTypeIndex = [...]uint8{0, 11, 23, 36, 56, 77}

func (i ProposalType) String() string {
	i -= 1
	if i >= ProposalType(len(_ProposalTypeIndex)-1) {
		return fmt.Sprintf("ProposalType(%d)", i+1)
	}
	return _ProposalTypeName[_ProposalTypeIndex[i]:_ProposalTypeIndex[i+1]]
}

var _ProposalTypeValues = []ProposalType{1, 2, 3, 4, 5}

var _ProposalTypeNameToValueMap = map[string]ProposalType{
	_ProposalTypeName[0:11]:  1,
	_ProposalTypeName[11:23]: 2,
	_ProposalTypeName[23:36]: 3,
	_ProposalTypeName[36:56]: 4,
	_ProposalTypeName[56:77]: 5,
}

// ProposalTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ProposalTypeString(s string) (ProposalType, error) {
	if val, ok := _ProposalTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ProposalType values", s)
}

// ProposalTypeValues returns all values of the enum
func ProposalTypeValues() []ProposalType {
	return _ProposalTypeValues
}

// IsAProposalType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ProposalType) IsAProposalType() bool {
	for _, v := range _ProposalTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ProposalType
func (i ProposalType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ProposalType
func (i *ProposalType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ProposalType should be a string, got %s", data)
	}

	var err error
	*i, err = ProposalTypeString(s)
	return err
}
