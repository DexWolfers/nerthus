// Code generated by "enumer -type=CouncilStatus -json -transform=snake -trimprefix=CouncilStatus"; DO NOT EDIT.

package sc

import (
	"encoding/json"
	"fmt"
)

const _CouncilStatusName = "validinvalid"

var _CouncilStatusIndex = [...]uint8{0, 5, 12}

func (i CouncilStatus) String() string {
	i -= 1
	if i >= CouncilStatus(len(_CouncilStatusIndex)-1) {
		return fmt.Sprintf("CouncilStatus(%d)", i+1)
	}
	return _CouncilStatusName[_CouncilStatusIndex[i]:_CouncilStatusIndex[i+1]]
}

var _CouncilStatusValues = []CouncilStatus{1, 2}

var _CouncilStatusNameToValueMap = map[string]CouncilStatus{
	_CouncilStatusName[0:5]:  1,
	_CouncilStatusName[5:12]: 2,
}

// CouncilStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CouncilStatusString(s string) (CouncilStatus, error) {
	if val, ok := _CouncilStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CouncilStatus values", s)
}

// CouncilStatusValues returns all values of the enum
func CouncilStatusValues() []CouncilStatus {
	return _CouncilStatusValues
}

// IsACouncilStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CouncilStatus) IsACouncilStatus() bool {
	for _, v := range _CouncilStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CouncilStatus
func (i CouncilStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CouncilStatus
func (i *CouncilStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CouncilStatus should be a string, got %s", data)
	}

	var err error
	*i, err = CouncilStatusString(s)
	return err
}
