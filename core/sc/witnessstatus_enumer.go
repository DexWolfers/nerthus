// Code generated by "enumer -type=WitnessStatus -json -transform=sname -trimprefix=Witness"; DO NOT EDIT.

package sc

import (
	"encoding/json"
	"fmt"
)

const _WitnessStatusName = "NormalLoggedOutInBlackList"

var _WitnessStatusIndex = [...]uint8{0, 6, 15, 26}

func (i WitnessStatus) String() string {
	i -= 1
	if i >= WitnessStatus(len(_WitnessStatusIndex)-1) {
		return fmt.Sprintf("WitnessStatus(%d)", i+1)
	}
	return _WitnessStatusName[_WitnessStatusIndex[i]:_WitnessStatusIndex[i+1]]
}

var _WitnessStatusValues = []WitnessStatus{1, 2, 3}

var _WitnessStatusNameToValueMap = map[string]WitnessStatus{
	_WitnessStatusName[0:6]:   1,
	_WitnessStatusName[6:15]:  2,
	_WitnessStatusName[15:26]: 3,
}

// WitnessStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func WitnessStatusString(s string) (WitnessStatus, error) {
	if val, ok := _WitnessStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to WitnessStatus values", s)
}

// WitnessStatusValues returns all values of the enum
func WitnessStatusValues() []WitnessStatus {
	return _WitnessStatusValues
}

// IsAWitnessStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i WitnessStatus) IsAWitnessStatus() bool {
	for _, v := range _WitnessStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for WitnessStatus
func (i WitnessStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for WitnessStatus
func (i *WitnessStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("WitnessStatus should be a string, got %s", data)
	}

	var err error
	*i, err = WitnessStatusString(s)
	return err
}
