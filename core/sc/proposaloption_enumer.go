// Code generated by "enumer -type=ProposalOption -json -transform=snake -trimprefix=ProposalOption"; DO NOT EDIT.

package sc

import (
	"encoding/json"
	"fmt"
)

const _ProposalOptionName = "applyvotingfinalizemarkuppassjoinunderway"

var _ProposalOptionIndex = [...]uint8{0, 5, 11, 19, 25, 29, 33, 41}

func (i ProposalOption) String() string {
	i -= 1
	if i >= ProposalOption(len(_ProposalOptionIndex)-1) {
		return fmt.Sprintf("ProposalOption(%d)", i+1)
	}
	return _ProposalOptionName[_ProposalOptionIndex[i]:_ProposalOptionIndex[i+1]]
}

var _ProposalOptionValues = []ProposalOption{1, 2, 3, 4, 5, 6, 7}

var _ProposalOptionNameToValueMap = map[string]ProposalOption{
	_ProposalOptionName[0:5]:   1,
	_ProposalOptionName[5:11]:  2,
	_ProposalOptionName[11:19]: 3,
	_ProposalOptionName[19:25]: 4,
	_ProposalOptionName[25:29]: 5,
	_ProposalOptionName[29:33]: 6,
	_ProposalOptionName[33:41]: 7,
}

// ProposalOptionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ProposalOptionString(s string) (ProposalOption, error) {
	if val, ok := _ProposalOptionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ProposalOption values", s)
}

// ProposalOptionValues returns all values of the enum
func ProposalOptionValues() []ProposalOption {
	return _ProposalOptionValues
}

// IsAProposalOption returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ProposalOption) IsAProposalOption() bool {
	for _, v := range _ProposalOptionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ProposalOption
func (i ProposalOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ProposalOption
func (i *ProposalOption) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ProposalOption should be a string, got %s", data)
	}

	var err error
	*i, err = ProposalOptionString(s)
	return err
}
