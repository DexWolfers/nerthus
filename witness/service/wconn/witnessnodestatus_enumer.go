// Code generated by "enumer -type=WitnessNodeStatus -json -transform=snake"; DO NOT EDIT.

package wconn

import (
	"encoding/json"
	"fmt"
)

const _WitnessNodeStatusName = "unknowntry_connectingnet_connectedjoineddisconnected"

var _WitnessNodeStatusIndex = [...]uint8{0, 7, 21, 34, 40, 52}

func (i WitnessNodeStatus) String() string {
	if i >= WitnessNodeStatus(len(_WitnessNodeStatusIndex)-1) {
		return fmt.Sprintf("WitnessNodeStatus(%d)", i)
	}
	return _WitnessNodeStatusName[_WitnessNodeStatusIndex[i]:_WitnessNodeStatusIndex[i+1]]
}

var _WitnessNodeStatusValues = []WitnessNodeStatus{0, 1, 2, 3, 4}

var _WitnessNodeStatusNameToValueMap = map[string]WitnessNodeStatus{
	_WitnessNodeStatusName[0:7]:   0,
	_WitnessNodeStatusName[7:21]:  1,
	_WitnessNodeStatusName[21:34]: 2,
	_WitnessNodeStatusName[34:40]: 3,
	_WitnessNodeStatusName[40:52]: 4,
}

// WitnessNodeStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func WitnessNodeStatusString(s string) (WitnessNodeStatus, error) {
	if val, ok := _WitnessNodeStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to WitnessNodeStatus values", s)
}

// WitnessNodeStatusValues returns all values of the enum
func WitnessNodeStatusValues() []WitnessNodeStatus {
	return _WitnessNodeStatusValues
}

// IsAWitnessNodeStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i WitnessNodeStatus) IsAWitnessNodeStatus() bool {
	for _, v := range _WitnessNodeStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for WitnessNodeStatus
func (i WitnessNodeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for WitnessNodeStatus
func (i *WitnessNodeStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("WitnessNodeStatus should be a string, got %s", data)
	}

	var err error
	*i, err = WitnessNodeStatusString(s)
	return err
}
