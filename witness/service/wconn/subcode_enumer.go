// Code generated by "enumer -type=SubCode -json -transform=snake -trimprefix=Code"; DO NOT EDIT.

package wconn

import (
	"encoding/json"
	"fmt"
)

const _SubCodeName = "shakestatusfetch_witness_conn"

var _SubCodeIndex = [...]uint8{0, 5, 11, 29}

func (i SubCode) String() string {
	i -= 11
	if i >= SubCode(len(_SubCodeIndex)-1) {
		return fmt.Sprintf("SubCode(%d)", i+11)
	}
	return _SubCodeName[_SubCodeIndex[i]:_SubCodeIndex[i+1]]
}

var _SubCodeValues = []SubCode{11, 12, 13}

var _SubCodeNameToValueMap = map[string]SubCode{
	_SubCodeName[0:5]:   11,
	_SubCodeName[5:11]:  12,
	_SubCodeName[11:29]: 13,
}

// SubCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SubCodeString(s string) (SubCode, error) {
	if val, ok := _SubCodeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SubCode values", s)
}

// SubCodeValues returns all values of the enum
func SubCodeValues() []SubCode {
	return _SubCodeValues
}

// IsASubCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SubCode) IsASubCode() bool {
	for _, v := range _SubCodeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SubCode
func (i SubCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SubCode
func (i *SubCode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SubCode should be a string, got %s", data)
	}

	var err error
	*i, err = SubCodeString(s)
	return err
}
