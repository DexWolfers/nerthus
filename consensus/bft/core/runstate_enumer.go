// Code generated by "enumer -type=RunState -json -transform=snake"; DO NOT EDIT.

package core

import (
	"encoding/json"
	"fmt"
)

const _RunStateName = "run_state_normalrun_state_nil_requestrun_state_old_sequencerun_round_too_big"

var _RunStateIndex = [...]uint8{0, 16, 37, 59, 76}

func (i RunState) String() string {
	if i >= RunState(len(_RunStateIndex)-1) {
		return fmt.Sprintf("RunState(%d)", i)
	}
	return _RunStateName[_RunStateIndex[i]:_RunStateIndex[i+1]]
}

var _RunStateValues = []RunState{0, 1, 2, 3}

var _RunStateNameToValueMap = map[string]RunState{
	_RunStateName[0:16]:  0,
	_RunStateName[16:37]: 1,
	_RunStateName[37:59]: 2,
	_RunStateName[59:76]: 3,
}

// RunStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RunStateString(s string) (RunState, error) {
	if val, ok := _RunStateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RunState values", s)
}

// RunStateValues returns all values of the enum
func RunStateValues() []RunState {
	return _RunStateValues
}

// IsARunState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RunState) IsARunState() bool {
	for _, v := range _RunStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for RunState
func (i RunState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for RunState
func (i *RunState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RunState should be a string, got %s", data)
	}

	var err error
	*i, err = RunStateString(s)
	return err
}
